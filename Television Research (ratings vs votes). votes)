{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f85a80d2",
   "metadata": {},
   "source": [
    "## Basic Python - Project <a id='intro'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1262df4",
   "metadata": {},
   "source": [
    "## Introduction <a id='intro'></a>\n",
    "In this project, you will work with data from the entertainment industry. You will study a dataset with records on movies and shows. The research will focus on the \"Golden Age\" of television, which began in 1999 with the release of *The Sopranos* and is still ongoing.\n",
    "\n",
    "The aim of this project is to investigate how the number of votes a title receives impacts its ratings. The assumption is that highly-rated shows (we will focus on TV shows, ignoring movies) released during the \"Golden Age\" of television also have the most votes.\n",
    "\n",
    "### Stages \n",
    "Data on movies and shows is stored in the `/datasets/movies_and_shows.csv` file. Data quality will be explored. First, from a quality standpoint if any significant issues. Then, during data preprocessing, account for the most critical problems.\n",
    "Project will consist of three stages:\n",
    " 1. Data overview\n",
    " 2. Data preprocessing\n",
    " 3. Data analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac0593ac",
   "metadata": {},
   "source": [
    "## Stage 1. Data overview <a id='data_review'></a>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1727d3f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing pandas\n",
    "import pandas as pd "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9821beeb",
   "metadata": {},
   "source": [
    "Read the `movies_and_shows.csv` file from the `datasets` folder and save it in the `df` variable:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fc5a1402",
   "metadata": {},
   "outputs": [],
   "source": [
    "# reading the files and storing them to df\n",
    "df=pd.read_csv(\"/datasets/movies_and_shows.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "acd92001",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>Character</th>\n",
       "      <th>r0le</th>\n",
       "      <th>TITLE</th>\n",
       "      <th>Type</th>\n",
       "      <th>release Year</th>\n",
       "      <th>genres</th>\n",
       "      <th>imdb sc0re</th>\n",
       "      <th>imdb v0tes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Robert De Niro</td>\n",
       "      <td>Travis Bickle</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jodie Foster</td>\n",
       "      <td>Iris Steensma</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albert Brooks</td>\n",
       "      <td>Tom</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Harvey Keitel</td>\n",
       "      <td>Matthew 'Sport' Higgins</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Cybill Shepherd</td>\n",
       "      <td>Betsy</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Peter Boyle</td>\n",
       "      <td>Wizard</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Leonard Harris</td>\n",
       "      <td>Senator Charles Palantine</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Diahnne Abbott</td>\n",
       "      <td>Concession Girl</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Gino Ardito</td>\n",
       "      <td>Policeman at Rally</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Martin Scorsese</td>\n",
       "      <td>Passenger Watching Silhouette</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              name                      Character   r0le        TITLE   Type  \\\n",
       "0   Robert De Niro                  Travis Bickle  ACTOR  Taxi Driver  MOVIE   \n",
       "1     Jodie Foster                  Iris Steensma  ACTOR  Taxi Driver  MOVIE   \n",
       "2    Albert Brooks                            Tom  ACTOR  Taxi Driver  MOVIE   \n",
       "3    Harvey Keitel        Matthew 'Sport' Higgins  ACTOR  Taxi Driver  MOVIE   \n",
       "4  Cybill Shepherd                          Betsy  ACTOR  Taxi Driver  MOVIE   \n",
       "5      Peter Boyle                         Wizard  ACTOR  Taxi Driver  MOVIE   \n",
       "6   Leonard Harris      Senator Charles Palantine  ACTOR  Taxi Driver  MOVIE   \n",
       "7   Diahnne Abbott                Concession Girl  ACTOR  Taxi Driver  MOVIE   \n",
       "8      Gino Ardito             Policeman at Rally  ACTOR  Taxi Driver  MOVIE   \n",
       "9  Martin Scorsese  Passenger Watching Silhouette  ACTOR  Taxi Driver  MOVIE   \n",
       "\n",
       "   release Year              genres  imdb sc0re  imdb v0tes  \n",
       "0          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "1          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "2          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "3          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "4          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "5          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "6          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "7          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "8          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "9          1976  ['drama', 'crime']         8.2    808582.0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# obtaining the first 10 rows from the df table\n",
    "df.head(10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e579aa91",
   "metadata": {},
   "source": [
    "Obtain the general information about the table with one command:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7bf66d2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 85579 entries, 0 to 85578\n",
      "Data columns (total 9 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0      name       85579 non-null  object \n",
      " 1   Character     85579 non-null  object \n",
      " 2   r0le          85579 non-null  object \n",
      " 3   TITLE         85578 non-null  object \n",
      " 4     Type        85579 non-null  object \n",
      " 5   release Year  85579 non-null  int64  \n",
      " 6   genres        85579 non-null  object \n",
      " 7   imdb sc0re    80970 non-null  float64\n",
      " 8   imdb v0tes    80853 non-null  float64\n",
      "dtypes: float64(2), int64(1), object(6)\n",
      "memory usage: 5.9+ MB\n"
     ]
    }
   ],
   "source": [
    "# obtaining general information about the data in df\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e91f62a7",
   "metadata": {},
   "source": [
    "The table contains nine columns. The majority store the same data type: object. The only exceptions are `'release Year'` (int64 type), `'imdb sc0re'` (float64 type) and `'imdb v0tes'` (float64 type). Scores and votes will be used in our analysis, so it's important to verify that they are present in the dataframe in the appropriate numeric format. Three columns (`'TITLE'`, `'imdb sc0re'` and `'imdb v0tes'`) have missing values.\n",
    "\n",
    "According to the documentation:\n",
    "- `'name'` — actor/director's name and last name\n",
    "- `'Character'` — character played (for actors)\n",
    "- `'r0le '` — the person's contribution to the title (it can be in the capacity of either actor or director)\n",
    "- `'TITLE '` — title of the movie (show)\n",
    "- `'  Type'` — show or movie\n",
    "- `'release Year'` — year when movie (show) was released\n",
    "- `'genres'` — list of genres under which the movie (show) falls\n",
    "- `'imdb sc0re'` — score on IMDb\n",
    "- `'imdb v0tes'` — votes on IMDb\n",
    "\n",
    "We can see three issues with the column names:\n",
    "1. Some names are uppercase, while others are lowercase.\n",
    "2. There are names containing whitespace.\n",
    "3. A few column names have digit '0' instead of letter 'o'. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4355de7b",
   "metadata": {},
   "source": [
    "### Conclusions <a id='data_review_conclusions'></a> \n",
    "\n",
    "Each row in the table stores data about a movie or show. The columns can be divided into two categories: the first is about the roles held by different people who worked on the movie or show (role, name of the actor or director, and character if the row is about an actor); the second category is information about the movie or show itself (title, release year, genre, imdb figures).\n",
    "\n",
    "It's clear that there is sufficient data to do the analysis and evaluate our assumption. However, to move forward, we need to preprocess the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5dc9111",
   "metadata": {},
   "source": [
    "## Stage 2. Data preprocessing <a id='data_preprocessing'></a>\n",
    "Correct the formatting in the column headers and deal with the missing values. Check whether there are duplicates in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9c850d13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>Character</th>\n",
       "      <th>r0le</th>\n",
       "      <th>TITLE</th>\n",
       "      <th>Type</th>\n",
       "      <th>release Year</th>\n",
       "      <th>genres</th>\n",
       "      <th>imdb sc0re</th>\n",
       "      <th>imdb v0tes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Robert De Niro</td>\n",
       "      <td>Travis Bickle</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Jodie Foster</td>\n",
       "      <td>Iris Steensma</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albert Brooks</td>\n",
       "      <td>Tom</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Harvey Keitel</td>\n",
       "      <td>Matthew 'Sport' Higgins</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Cybill Shepherd</td>\n",
       "      <td>Betsy</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Peter Boyle</td>\n",
       "      <td>Wizard</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Leonard Harris</td>\n",
       "      <td>Senator Charles Palantine</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Diahnne Abbott</td>\n",
       "      <td>Concession Girl</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Gino Ardito</td>\n",
       "      <td>Policeman at Rally</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Martin Scorsese</td>\n",
       "      <td>Passenger Watching Silhouette</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              name                      Character   r0le        TITLE   Type  \\\n",
       "0   Robert De Niro                  Travis Bickle  ACTOR  Taxi Driver  MOVIE   \n",
       "1     Jodie Foster                  Iris Steensma  ACTOR  Taxi Driver  MOVIE   \n",
       "2    Albert Brooks                            Tom  ACTOR  Taxi Driver  MOVIE   \n",
       "3    Harvey Keitel        Matthew 'Sport' Higgins  ACTOR  Taxi Driver  MOVIE   \n",
       "4  Cybill Shepherd                          Betsy  ACTOR  Taxi Driver  MOVIE   \n",
       "5      Peter Boyle                         Wizard  ACTOR  Taxi Driver  MOVIE   \n",
       "6   Leonard Harris      Senator Charles Palantine  ACTOR  Taxi Driver  MOVIE   \n",
       "7   Diahnne Abbott                Concession Girl  ACTOR  Taxi Driver  MOVIE   \n",
       "8      Gino Ardito             Policeman at Rally  ACTOR  Taxi Driver  MOVIE   \n",
       "9  Martin Scorsese  Passenger Watching Silhouette  ACTOR  Taxi Driver  MOVIE   \n",
       "\n",
       "   release Year              genres  imdb sc0re  imdb v0tes  \n",
       "0          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "1          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "2          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "3          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "4          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "5          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "6          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "7          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "8          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "9          1976  ['drama', 'crime']         8.2    808582.0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the list of column names in the df table\n",
    "df.loc[0:9]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f966df9",
   "metadata": {},
   "source": [
    "Change the column names according to the rules of good style:\n",
    "* If the name has several words, use snake_case\n",
    "* All characters must be lowercase\n",
    "* Remove whitespace\n",
    "* Replace zero with letter 'o'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "23a1dc11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['   name', 'Character', 'r0le', 'TITLE', '  Type', 'release Year',\n",
      "       'genres', 'imdb sc0re', 'imdb v0tes'],\n",
      "      dtype='object')\n",
      "Index(['name', 'character', 'role', 'title', 'type', 'release_year', 'genres',\n",
      "       'imdb_score', 'imdb_votes'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# renaming columns\n",
    "print(df.columns)\n",
    "def clean_headers(test):\n",
    "    clean_headers=[]\n",
    "    for run in test:\n",
    "        run = run.lower()\n",
    "        run = run.replace('0','o')\n",
    "        run = run.strip()\n",
    "        run = run.replace(' ','_')\n",
    "        clean_headers.append(run)\n",
    "    return clean_headers\n",
    "df.columns=clean_headers(df)\n",
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0eb6527f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['name',\n",
       " 'character',\n",
       " 'role',\n",
       " 'title',\n",
       " 'type',\n",
       " 'release_year',\n",
       " 'genres',\n",
       " 'imdb_score',\n",
       " 'imdb_votes']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking result: the list of column names\n",
    "clean_headers(df.loc[0:9])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14d9c319",
   "metadata": {},
   "source": [
    "### Missing values <a id='missing_values'></a>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "21c427f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name               0\n",
       "character          0\n",
       "role               0\n",
       "title              1\n",
       "type               0\n",
       "release_year       0\n",
       "genres             0\n",
       "imdb_score      4609\n",
       "imdb_votes      4726\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculating missing values\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8272df3",
   "metadata": {},
   "source": [
    "Not all missing values affect the research: the single missing value in `'title'` is not critical. The missing values in columns `'imdb_score'` and `'imdb_votes'` represent around 6% of all records (4,609 and 4,726, respectively, of the total 85,579). This could potentially affect our research. To avoid issue, dropped rows with missing values in the `'imdb_score'` and `'imdb_votes'` columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "599d5550",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dropping rows where columns with title, scores and votes have missing values\n",
    "df=df.dropna(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "55c0b0ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name            0\n",
       "character       0\n",
       "role            0\n",
       "title           0\n",
       "type            0\n",
       "release_year    0\n",
       "genres          0\n",
       "imdb_score      0\n",
       "imdb_votes      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# counting missing values\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7dc7aa0",
   "metadata": {},
   "source": [
    "### Duplicates <a id='duplicates'></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9227df01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6994"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# counting duplicate rows\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bcf32fcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "85574    False\n",
       "85575    False\n",
       "85576    False\n",
       "85577     True\n",
       "85578    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Produce table with duplicates (with original rows included) and review last 5 rows\n",
    "dfs=df.duplicated()\n",
    "dfs.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1ed6640",
   "metadata": {},
   "source": [
    "There are two clear duplicates in the printed rows. Remove with `pandas` method for getting rid of duplicate rows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "724d5bc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# removing duplicate rows\n",
    "df=df.drop_duplicates().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8091a9bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking for duplicates\n",
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d802b07",
   "metadata": {},
   "source": [
    "Remove implicit duplicates in the `'type'` column. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5f987ed",
   "metadata": {},
   "source": [
    "Print a list of unique `'type'` names, sorted in alphabetical order.\n",
    "* Retrieve the intended dataframe column \n",
    "* Apply a sorting method to it\n",
    "* For the sorted column, call the method that will return all unique column values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3d7b0ac5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['MOVIE', 'SHOW', 'movies', 'shows', 'the movie', 'tv', 'tv series',\n",
       "       'tv show', 'tv shows'], dtype=object)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# viewing unique type names\n",
    "df['type'].sort_values().unique()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac6e8b18",
   "metadata": {},
   "source": [
    "above are implicit duplicates of `'show'` (`'movie'` duplicates will be ignored since the assumption is about shows). \n",
    "These could be names written incorrectly or alternative names of the same genre.\n",
    "\n",
    "Following were found:\n",
    "* `'shows'`\n",
    "* `'SHOW'`\n",
    "* `'tv show'`\n",
    "* `'tv shows'`\n",
    "* `'tv series'`\n",
    "* `'tv'`\n",
    "\n",
    "To get rid of them, declared the function `replace_wrong_show()` with two parameters: \n",
    "* `wrong_shows_list=` — the list of duplicates\n",
    "* `correct_show=` — the string with the correct value\n",
    "\n",
    "The function corrects the names in the `'type'` column from the `df` table (i.e., replace each value from the `wrong_shows_list` list with the value in `correct_show`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "bff944f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function for replacing implicit duplicates\n",
    "def replace_wrong_show(wrong_shows_list, correct_show):\n",
    "    df['type'] = df['type'].replace(wrong_shows_list, correct_show)\n",
    "wrong_shows_list=['SHOW','shows', 'tv', 'tv series',\n",
    "       'tv show', 'tv shows']\n",
    "correct_show='SHOW'\n",
    "\n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d02d13a6",
   "metadata": {},
   "source": [
    "Called `replace_wrong_show()` and passed it arguments so that it clears implicit duplicates and replaces them with `SHOW`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a2217e53",
   "metadata": {},
   "outputs": [],
   "source": [
    "# removing implicit duplicate\n",
    "replace_wrong_show(wrong_shows_list, correct_show)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "318b09f7",
   "metadata": {},
   "source": [
    "Check duplicate names are removed. Printed the list of unique values from the `'type'` column:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "25d49d73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['MOVIE', 'SHOW', 'movies', 'the movie'], dtype=object)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# viewing unique genre names\n",
    "df['type'].sort_values().unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18b2049e",
   "metadata": {},
   "source": [
    "### Conclusions <a id='data_preprocessing_conclusions'></a>\n",
    "We detected three issues with the data:\n",
    "\n",
    "- Incorrect header styles\n",
    "- Missing values\n",
    "- Duplicate rows and implicit duplicates\n",
    "\n",
    "The headers have been cleaned up to make processing the table simpler.\n",
    "\n",
    "All rows with missing values have been removed. \n",
    "\n",
    "The absence of duplicates will make the results more precise and easier to understand.\n",
    "\n",
    "Now we can move on to our analysis of the prepared data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1aa0f1b1",
   "metadata": {},
   "source": [
    "## Stage 3. Data analysis <a id='hypotheses'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8fb6a0e",
   "metadata": {},
   "source": [
    "Based on the previous project stages, will now define how the assumption will be checked. Calculate the average amount of votes for each score (this data is available in the `imdb_score` and `imdb_votes` columns), and then check how these averages relate to each other. If the averages for shows with the highest scores are bigger than those for shows with lower scores, the assumption appears to be true.\n",
    "\n",
    "Following steps performed below:\n",
    "\n",
    "- Filtered the dataframe to only include shows released in 1999 or later.\n",
    "- Group scores into buckets by rounding the values of the appropriate column (a set of 1-10 integers will make the outcome of our calculations more evident without damaging the quality of our research).\n",
    "- Identify outliers among scores based on their number of votes, and exclude scores with few votes.\n",
    "- Calculate the average votes for each score and check whether the assumption matches the results."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ea2cb51",
   "metadata": {},
   "source": [
    "Filter the dataframe and only include shows released in 1999 or later. First, keep only titles published in 1999 or later in dataframe. Then, filter the table to only contain shows (movies will be removed)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6a704aa1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>name</th>\n",
       "      <th>character</th>\n",
       "      <th>role</th>\n",
       "      <th>title</th>\n",
       "      <th>type</th>\n",
       "      <th>release_year</th>\n",
       "      <th>genres</th>\n",
       "      <th>imdb_score</th>\n",
       "      <th>imdb_votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1661</th>\n",
       "      <td>1664</td>\n",
       "      <td>Jeff Probst</td>\n",
       "      <td>Himself - Host</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Survivor</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>2000</td>\n",
       "      <td>['reality']</td>\n",
       "      <td>7.4</td>\n",
       "      <td>24687.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1952</th>\n",
       "      <td>1955</td>\n",
       "      <td>Benicio del Toro</td>\n",
       "      <td>Franky Four Fingers</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Snatch</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>2000</td>\n",
       "      <td>['crime', 'comedy']</td>\n",
       "      <td>8.3</td>\n",
       "      <td>841435.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1953</th>\n",
       "      <td>1956</td>\n",
       "      <td>Dennis Farina</td>\n",
       "      <td>Cousin Avi</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Snatch</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>2000</td>\n",
       "      <td>['crime', 'comedy']</td>\n",
       "      <td>8.3</td>\n",
       "      <td>841435.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1954</th>\n",
       "      <td>1957</td>\n",
       "      <td>Vinnie Jones</td>\n",
       "      <td>Bullet Tooth Tony</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Snatch</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>2000</td>\n",
       "      <td>['crime', 'comedy']</td>\n",
       "      <td>8.3</td>\n",
       "      <td>841435.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1955</th>\n",
       "      <td>1958</td>\n",
       "      <td>Brad Pitt</td>\n",
       "      <td>Mickey O'Neil</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Snatch</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>2000</td>\n",
       "      <td>['crime', 'comedy']</td>\n",
       "      <td>8.3</td>\n",
       "      <td>841435.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73854</th>\n",
       "      <td>85573</td>\n",
       "      <td>A??da Morales</td>\n",
       "      <td>Maritza</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Lokillo</td>\n",
       "      <td>the movie</td>\n",
       "      <td>2021</td>\n",
       "      <td>['comedy']</td>\n",
       "      <td>3.8</td>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73855</th>\n",
       "      <td>85574</td>\n",
       "      <td>Adelaida Buscato</td>\n",
       "      <td>Mar??a Paz</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Lokillo</td>\n",
       "      <td>the movie</td>\n",
       "      <td>2021</td>\n",
       "      <td>['comedy']</td>\n",
       "      <td>3.8</td>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73856</th>\n",
       "      <td>85575</td>\n",
       "      <td>Luz Stella Luengas</td>\n",
       "      <td>Karen Bayona</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Lokillo</td>\n",
       "      <td>the movie</td>\n",
       "      <td>2021</td>\n",
       "      <td>['comedy']</td>\n",
       "      <td>3.8</td>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73857</th>\n",
       "      <td>85576</td>\n",
       "      <td>In??s Prieto</td>\n",
       "      <td>Fanny</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Lokillo</td>\n",
       "      <td>the movie</td>\n",
       "      <td>2021</td>\n",
       "      <td>['comedy']</td>\n",
       "      <td>3.8</td>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73858</th>\n",
       "      <td>85578</td>\n",
       "      <td>Julian Gaviria</td>\n",
       "      <td>unknown</td>\n",
       "      <td>DIRECTOR</td>\n",
       "      <td>Lokillo</td>\n",
       "      <td>the movie</td>\n",
       "      <td>2021</td>\n",
       "      <td>['comedy']</td>\n",
       "      <td>3.8</td>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>69881 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       index                name            character      role     title  \\\n",
       "1661    1664         Jeff Probst       Himself - Host     ACTOR  Survivor   \n",
       "1952    1955    Benicio del Toro  Franky Four Fingers     ACTOR    Snatch   \n",
       "1953    1956       Dennis Farina           Cousin Avi     ACTOR    Snatch   \n",
       "1954    1957        Vinnie Jones    Bullet Tooth Tony     ACTOR    Snatch   \n",
       "1955    1958           Brad Pitt        Mickey O'Neil     ACTOR    Snatch   \n",
       "...      ...                 ...                  ...       ...       ...   \n",
       "73854  85573       A??da Morales              Maritza     ACTOR   Lokillo   \n",
       "73855  85574    Adelaida Buscato           Mar??a Paz     ACTOR   Lokillo   \n",
       "73856  85575  Luz Stella Luengas         Karen Bayona     ACTOR   Lokillo   \n",
       "73857  85576        In??s Prieto                Fanny     ACTOR   Lokillo   \n",
       "73858  85578      Julian Gaviria              unknown  DIRECTOR   Lokillo   \n",
       "\n",
       "            type  release_year               genres  imdb_score  imdb_votes  \n",
       "1661        SHOW          2000          ['reality']         7.4     24687.0  \n",
       "1952       MOVIE          2000  ['crime', 'comedy']         8.3    841435.0  \n",
       "1953       MOVIE          2000  ['crime', 'comedy']         8.3    841435.0  \n",
       "1954       MOVIE          2000  ['crime', 'comedy']         8.3    841435.0  \n",
       "1955       MOVIE          2000  ['crime', 'comedy']         8.3    841435.0  \n",
       "...          ...           ...                  ...         ...         ...  \n",
       "73854  the movie          2021           ['comedy']         3.8        68.0  \n",
       "73855  the movie          2021           ['comedy']         3.8        68.0  \n",
       "73856  the movie          2021           ['comedy']         3.8        68.0  \n",
       "73857  the movie          2021           ['comedy']         3.8        68.0  \n",
       "73858  the movie          2021           ['comedy']         3.8        68.0  \n",
       "\n",
       "[69881 rows x 10 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# using conditional indexing modify df so it has only titles released after 1999 (with 1999 included)\n",
    "# give the slice of dataframe new name\n",
    "\n",
    "df_later1999=df[df['release_year'] >= 1999]\n",
    "df_later1999\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "128dc6a9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>name</th>\n",
       "      <th>character</th>\n",
       "      <th>role</th>\n",
       "      <th>title</th>\n",
       "      <th>type</th>\n",
       "      <th>release_year</th>\n",
       "      <th>genres</th>\n",
       "      <th>imdb_score</th>\n",
       "      <th>imdb_votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1661</th>\n",
       "      <td>1664</td>\n",
       "      <td>Jeff Probst</td>\n",
       "      <td>Himself - Host</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Survivor</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>2000</td>\n",
       "      <td>['reality']</td>\n",
       "      <td>7.4</td>\n",
       "      <td>24687.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2073</th>\n",
       "      <td>2076</td>\n",
       "      <td>Mayumi Tanaka</td>\n",
       "      <td>Monkey D. Luffy (voice)</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>One Piece</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>1999</td>\n",
       "      <td>['animation', 'action', 'comedy', 'drama', 'fa...</td>\n",
       "      <td>8.8</td>\n",
       "      <td>117129.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2074</th>\n",
       "      <td>2077</td>\n",
       "      <td>Kazuya Nakai</td>\n",
       "      <td>Roronoa Zoro (voice)</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>One Piece</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>1999</td>\n",
       "      <td>['animation', 'action', 'comedy', 'drama', 'fa...</td>\n",
       "      <td>8.8</td>\n",
       "      <td>117129.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2075</th>\n",
       "      <td>2078</td>\n",
       "      <td>Akemi Okamura</td>\n",
       "      <td>Nami (voice)</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>One Piece</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>1999</td>\n",
       "      <td>['animation', 'action', 'comedy', 'drama', 'fa...</td>\n",
       "      <td>8.8</td>\n",
       "      <td>117129.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2076</th>\n",
       "      <td>2079</td>\n",
       "      <td>Kappei Yamaguchi</td>\n",
       "      <td>Usopp (voice)</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>One Piece</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>1999</td>\n",
       "      <td>['animation', 'action', 'comedy', 'drama', 'fa...</td>\n",
       "      <td>8.8</td>\n",
       "      <td>117129.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      index              name                character   role      title  \\\n",
       "1661   1664       Jeff Probst           Himself - Host  ACTOR   Survivor   \n",
       "2073   2076     Mayumi Tanaka  Monkey D. Luffy (voice)  ACTOR  One Piece   \n",
       "2074   2077      Kazuya Nakai     Roronoa Zoro (voice)  ACTOR  One Piece   \n",
       "2075   2078     Akemi Okamura             Nami (voice)  ACTOR  One Piece   \n",
       "2076   2079  Kappei Yamaguchi            Usopp (voice)  ACTOR  One Piece   \n",
       "\n",
       "      type  release_year                                             genres  \\\n",
       "1661  SHOW          2000                                        ['reality']   \n",
       "2073  SHOW          1999  ['animation', 'action', 'comedy', 'drama', 'fa...   \n",
       "2074  SHOW          1999  ['animation', 'action', 'comedy', 'drama', 'fa...   \n",
       "2075  SHOW          1999  ['animation', 'action', 'comedy', 'drama', 'fa...   \n",
       "2076  SHOW          1999  ['animation', 'action', 'comedy', 'drama', 'fa...   \n",
       "\n",
       "      imdb_score  imdb_votes  \n",
       "1661         7.4     24687.0  \n",
       "2073         8.8    117129.0  \n",
       "2074         8.8    117129.0  \n",
       "2075         8.8    117129.0  \n",
       "2076         8.8    117129.0  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# repeat conditional indexing so df has only shows (movies are removed as result)\n",
    "df_only_show=df_later1999[df_later1999['type'] == 'SHOW']\n",
    "\n",
    "df_only_show.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2513da2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>name</th>\n",
       "      <th>character</th>\n",
       "      <th>role</th>\n",
       "      <th>title</th>\n",
       "      <th>type</th>\n",
       "      <th>release_year</th>\n",
       "      <th>genres</th>\n",
       "      <th>imdb_score</th>\n",
       "      <th>imdb_votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Robert De Niro</td>\n",
       "      <td>Travis Bickle</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Jodie Foster</td>\n",
       "      <td>Iris Steensma</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Albert Brooks</td>\n",
       "      <td>Tom</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Harvey Keitel</td>\n",
       "      <td>Matthew 'Sport' Higgins</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Cybill Shepherd</td>\n",
       "      <td>Betsy</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Taxi Driver</td>\n",
       "      <td>MOVIE</td>\n",
       "      <td>1976</td>\n",
       "      <td>['drama', 'crime']</td>\n",
       "      <td>8.2</td>\n",
       "      <td>808582.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index             name                character   role        title   type  \\\n",
       "0      0   Robert De Niro            Travis Bickle  ACTOR  Taxi Driver  MOVIE   \n",
       "1      1     Jodie Foster            Iris Steensma  ACTOR  Taxi Driver  MOVIE   \n",
       "2      2    Albert Brooks                      Tom  ACTOR  Taxi Driver  MOVIE   \n",
       "3      3    Harvey Keitel  Matthew 'Sport' Higgins  ACTOR  Taxi Driver  MOVIE   \n",
       "4      4  Cybill Shepherd                    Betsy  ACTOR  Taxi Driver  MOVIE   \n",
       "\n",
       "   release_year              genres  imdb_score  imdb_votes  \n",
       "0          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "1          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "2          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "3          1976  ['drama', 'crime']         8.2    808582.0  \n",
       "4          1976  ['drama', 'crime']         8.2    808582.0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9648040c",
   "metadata": {},
   "source": [
    "The scores that are to be grouped should be rounded. For instance, titles with scores like 7.8, 8.1, and 8.3 will all be placed in the same bucket with a score of 8."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "54bbd5c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>name</th>\n",
       "      <th>character</th>\n",
       "      <th>role</th>\n",
       "      <th>title</th>\n",
       "      <th>type</th>\n",
       "      <th>release_year</th>\n",
       "      <th>genres</th>\n",
       "      <th>imdb_score</th>\n",
       "      <th>imdb_votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>73831</th>\n",
       "      <td>85433</td>\n",
       "      <td>Maneerat Kam-Uan</td>\n",
       "      <td>Ae</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Let's Eat</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>2021</td>\n",
       "      <td>['drama', 'comedy']</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73832</th>\n",
       "      <td>85434</td>\n",
       "      <td>Rudklao Amratisha</td>\n",
       "      <td>unknown</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Let's Eat</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>2021</td>\n",
       "      <td>['drama', 'comedy']</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73833</th>\n",
       "      <td>85435</td>\n",
       "      <td>Jaturong Mokjok</td>\n",
       "      <td>unknown</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Let's Eat</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>2021</td>\n",
       "      <td>['drama', 'comedy']</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73834</th>\n",
       "      <td>85436</td>\n",
       "      <td>Pisamai Wilaisak</td>\n",
       "      <td>unknown</td>\n",
       "      <td>ACTOR</td>\n",
       "      <td>Let's Eat</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>2021</td>\n",
       "      <td>['drama', 'comedy']</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73835</th>\n",
       "      <td>85437</td>\n",
       "      <td>Sarawut Wichiensarn</td>\n",
       "      <td>unknown</td>\n",
       "      <td>DIRECTOR</td>\n",
       "      <td>Let's Eat</td>\n",
       "      <td>SHOW</td>\n",
       "      <td>2021</td>\n",
       "      <td>['drama', 'comedy']</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       index                 name character      role      title  type  \\\n",
       "73831  85433     Maneerat Kam-Uan        Ae     ACTOR  Let's Eat  SHOW   \n",
       "73832  85434    Rudklao Amratisha   unknown     ACTOR  Let's Eat  SHOW   \n",
       "73833  85435      Jaturong Mokjok   unknown     ACTOR  Let's Eat  SHOW   \n",
       "73834  85436     Pisamai Wilaisak   unknown     ACTOR  Let's Eat  SHOW   \n",
       "73835  85437  Sarawut Wichiensarn   unknown  DIRECTOR  Let's Eat  SHOW   \n",
       "\n",
       "       release_year               genres  imdb_score  imdb_votes  \n",
       "73831          2021  ['drama', 'comedy']         8.0         5.0  \n",
       "73832          2021  ['drama', 'comedy']         8.0         5.0  \n",
       "73833          2021  ['drama', 'comedy']         8.0         5.0  \n",
       "73834          2021  ['drama', 'comedy']         8.0         5.0  \n",
       "73835          2021  ['drama', 'comedy']         8.0         5.0  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# rounding column with scores\n",
    "df_only_show=df_only_show.round({'imdb_score': 0 })\n",
    "#checking the outcome with tail()\n",
    "df_only_show.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36dbd00a",
   "metadata": {},
   "source": [
    "Identify outliers based on the number of votes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b8b55e95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "imdb_score\n",
       "2.0       24\n",
       "3.0       27\n",
       "4.0      180\n",
       "5.0      592\n",
       "6.0     2494\n",
       "7.0     4706\n",
       "8.0     4842\n",
       "9.0      557\n",
       "10.0       8\n",
       "dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use groupby() for scores and count all unique values in each group, print the result\n",
    "df_only_show.groupby([\"imdb_score\"]).size()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ba6daae",
   "metadata": {},
   "source": [
    "Based on the aggregation performed, it is evident that scores 2 (24 voted shows), 3 (27 voted shows), and 10 (only 8 voted shows) are outliers. \n",
    "There isn't enough data for these scores for the average number of votes to be meaningful."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd468c46",
   "metadata": {},
   "source": [
    "To obtain the mean numbers of votes for the selected scores (range of 4-9 as acceptable), use conditional filtering and grouping."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d1867e0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>imdb_score</th>\n",
       "      <th>imdb_votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.0</td>\n",
       "      <td>5277.583333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3143.942568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.0</td>\n",
       "      <td>3481.717322</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.0</td>\n",
       "      <td>8727.068211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.0</td>\n",
       "      <td>30299.460967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9.0</td>\n",
       "      <td>126904.109515</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   imdb_score     imdb_votes\n",
       "0         4.0    5277.583333\n",
       "1         5.0    3143.942568\n",
       "2         6.0    3481.717322\n",
       "3         7.0    8727.068211\n",
       "4         8.0   30299.460967\n",
       "5         9.0  126904.109515"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filter dataframe using two conditions (scores to be in the range 4-9)\n",
    "df_score_range_filter=df_only_show[df_only_show['imdb_score'] >= 4]\n",
    "df_score_range_filter = df_score_range_filter[df_score_range_filter['imdb_score'] <= 9]\n",
    "# group scores and corresponding average number of votes, reset index and print the result\n",
    "df_score_range_filter=df_score_range_filter.groupby([\"imdb_score\"])[\"imdb_votes\"].mean().reset_index()\n",
    "df_score_range_filter\n",
    "#df_score_range_filter['imdb_votes'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96a66d14",
   "metadata": {},
   "source": [
    "Rounded the column with the averages, renamed both columns, and printed the dataframe in descending order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5999051b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>average_imdb_score</th>\n",
       "      <th>average_imdb_votes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9.0</td>\n",
       "      <td>126904.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8.0</td>\n",
       "      <td>30299.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.0</td>\n",
       "      <td>8727.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6.0</td>\n",
       "      <td>3482.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3144.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.0</td>\n",
       "      <td>5278.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   average_imdb_score  average_imdb_votes\n",
       "5                 9.0            126904.0\n",
       "4                 8.0             30299.0\n",
       "3                 7.0              8727.0\n",
       "2                 6.0              3482.0\n",
       "1                 5.0              3144.0\n",
       "0                 4.0              5278.0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# round column with averages\n",
    "df_score_range_filter['imdb_votes']=df_score_range_filter['imdb_votes'].round(0)\n",
    "                        \n",
    "# rename columns\n",
    "df_score_range_filter = df_score_range_filter.rename(columns={\"imdb_score\": \"average_imdb_score\", \"imdb_votes\": \"average_imdb_votes\"})\n",
    "# print dataframe in descending order\n",
    "df_score_range_filter.sort_values(by='average_imdb_score',ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af07386d",
   "metadata": {},
   "source": [
    "The assumption macthes the analysis: the shows with the top 3 scores have the most amounts of votes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84e29a37",
   "metadata": {},
   "source": [
    "## Conclusion <a id='hypotheses'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "984766a3",
   "metadata": {},
   "source": [
    "The research done confirms that highly-rated shows released during the \"Golden Age\" of television also have the most votes. While shows with score 4 have more votes than ones with scores 5 and 6, the top three (scores 7-9) have the largest number. The data studied represents around 94% of the original set, so we can be confident in our findings."
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 532,
    "start_time": "2024-08-06T19:37:44.503Z"
   },
   {
    "duration": 265,
    "start_time": "2024-08-06T19:37:48.410Z"
   },
   {
    "duration": 42,
    "start_time": "2024-08-06T19:37:51.970Z"
   },
   {
    "duration": 62,
    "start_time": "2024-08-06T19:37:56.081Z"
   },
   {
    "duration": 401,
    "start_time": "2024-08-06T19:38:43.655Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-06T19:41:26.698Z"
   },
   {
    "duration": 47,
    "start_time": "2024-08-06T19:41:33.095Z"
   },
   {
    "duration": 10,
    "start_time": "2024-08-06T19:42:23.514Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-06T19:42:52.367Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-06T19:43:08.800Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-06T21:15:03.878Z"
   },
   {
    "duration": 13,
    "start_time": "2024-08-06T21:15:13.480Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-06T21:15:23.328Z"
   },
   {
    "duration": 24,
    "start_time": "2024-08-06T21:17:39.058Z"
   },
   {
    "duration": 46,
    "start_time": "2024-08-06T21:17:46.184Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-06T21:18:42.537Z"
   },
   {
    "duration": 6,
    "start_time": "2024-08-06T21:21:08.481Z"
   },
   {
    "duration": 34,
    "start_time": "2024-08-06T21:21:24.933Z"
   },
   {
    "duration": 127,
    "start_time": "2024-08-06T21:24:49.164Z"
   },
   {
    "duration": 21,
    "start_time": "2024-08-06T21:28:00.358Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-06T21:28:27.645Z"
   },
   {
    "duration": 9,
    "start_time": "2024-08-06T21:52:05.131Z"
   },
   {
    "duration": 48,
    "start_time": "2024-08-06T21:52:11.317Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-06T21:52:15.841Z"
   },
   {
    "duration": 66,
    "start_time": "2024-08-06T21:53:14.241Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-06T21:53:26.192Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-06T21:53:46.522Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-06T21:55:38.309Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-06T21:55:47.838Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-06T21:56:07.823Z"
   },
   {
    "duration": 24,
    "start_time": "2024-08-06T21:56:54.353Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-06T21:57:47.330Z"
   },
   {
    "duration": 28,
    "start_time": "2024-08-06T21:59:12.508Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-06T21:59:56.524Z"
   },
   {
    "duration": 320,
    "start_time": "2024-08-07T01:10:13.965Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-07T01:10:31.897Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-07T01:12:14.681Z"
   },
   {
    "duration": 21,
    "start_time": "2024-08-07T01:12:32.826Z"
   },
   {
    "duration": 21,
    "start_time": "2024-08-07T01:15:01.653Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-07T01:15:18.105Z"
   },
   {
    "duration": 506,
    "start_time": "2024-08-07T01:15:43.695Z"
   },
   {
    "duration": 239,
    "start_time": "2024-08-07T01:15:44.205Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T01:15:44.446Z"
   },
   {
    "duration": 54,
    "start_time": "2024-08-07T01:15:44.476Z"
   },
   {
    "duration": 18,
    "start_time": "2024-08-07T01:15:44.534Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-07T01:15:44.555Z"
   },
   {
    "duration": 41,
    "start_time": "2024-08-07T01:15:44.566Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-07T01:15:44.610Z"
   },
   {
    "duration": 62,
    "start_time": "2024-08-07T01:15:44.643Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T01:15:44.710Z"
   },
   {
    "duration": 95,
    "start_time": "2024-08-07T01:15:44.738Z"
   },
   {
    "duration": 73,
    "start_time": "2024-08-07T01:15:44.837Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T01:15:44.912Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T01:15:44.920Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T01:15:44.927Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T01:15:44.935Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T01:15:44.943Z"
   },
   {
    "duration": 52,
    "start_time": "2024-08-07T01:15:44.951Z"
   },
   {
    "duration": 3,
    "start_time": "2024-08-07T01:15:45.007Z"
   },
   {
    "duration": 3,
    "start_time": "2024-08-07T01:15:45.014Z"
   },
   {
    "duration": 3,
    "start_time": "2024-08-07T01:15:45.021Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T01:15:45.028Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T01:15:45.036Z"
   },
   {
    "duration": 59,
    "start_time": "2024-08-07T01:15:45.043Z"
   },
   {
    "duration": 153,
    "start_time": "2024-08-07T01:20:35.974Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T01:20:53.317Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T01:21:10.685Z"
   },
   {
    "duration": 63,
    "start_time": "2024-08-07T01:22:36.253Z"
   },
   {
    "duration": 65,
    "start_time": "2024-08-07T01:23:57.023Z"
   },
   {
    "duration": 61,
    "start_time": "2024-08-07T01:24:21.263Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T01:26:23.193Z"
   },
   {
    "duration": 87,
    "start_time": "2024-08-07T01:28:47.705Z"
   },
   {
    "duration": 69,
    "start_time": "2024-08-07T01:29:19.999Z"
   },
   {
    "duration": 235,
    "start_time": "2024-08-07T01:34:38.741Z"
   },
   {
    "duration": 36,
    "start_time": "2024-08-07T01:34:51.978Z"
   },
   {
    "duration": 1676,
    "start_time": "2024-08-07T01:43:53.311Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T01:44:39.419Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-07T01:47:05.775Z"
   },
   {
    "duration": 74,
    "start_time": "2024-08-07T01:48:37.981Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T02:12:19.727Z"
   },
   {
    "duration": 5,
    "start_time": "2024-08-07T02:12:26.676Z"
   },
   {
    "duration": 163,
    "start_time": "2024-08-07T02:12:33.242Z"
   },
   {
    "duration": 240,
    "start_time": "2024-08-07T02:13:06.802Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T02:21:35.843Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-07T02:26:42.227Z"
   },
   {
    "duration": 86,
    "start_time": "2024-08-07T02:26:56.224Z"
   },
   {
    "duration": 139,
    "start_time": "2024-08-07T02:28:25.186Z"
   },
   {
    "duration": 76,
    "start_time": "2024-08-07T02:29:31.435Z"
   },
   {
    "duration": 80,
    "start_time": "2024-08-07T02:40:10.554Z"
   },
   {
    "duration": 140,
    "start_time": "2024-08-07T02:41:13.919Z"
   },
   {
    "duration": 148,
    "start_time": "2024-08-07T02:41:23.615Z"
   },
   {
    "duration": 165,
    "start_time": "2024-08-07T02:41:38.158Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T02:44:35.089Z"
   },
   {
    "duration": 33,
    "start_time": "2024-08-07T02:46:24.530Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-07T02:47:57.165Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-07T02:48:14.118Z"
   },
   {
    "duration": 35,
    "start_time": "2024-08-07T02:48:25.871Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T02:48:56.478Z"
   },
   {
    "duration": 28,
    "start_time": "2024-08-07T02:49:21.235Z"
   },
   {
    "duration": 482,
    "start_time": "2024-08-07T02:50:52.997Z"
   },
   {
    "duration": 228,
    "start_time": "2024-08-07T02:50:53.483Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-07T02:50:53.714Z"
   },
   {
    "duration": 69,
    "start_time": "2024-08-07T02:50:53.743Z"
   },
   {
    "duration": 18,
    "start_time": "2024-08-07T02:50:53.818Z"
   },
   {
    "duration": 9,
    "start_time": "2024-08-07T02:50:53.839Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T02:50:53.852Z"
   },
   {
    "duration": 66,
    "start_time": "2024-08-07T02:50:53.862Z"
   },
   {
    "duration": 37,
    "start_time": "2024-08-07T02:50:53.934Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-07T02:50:54.001Z"
   },
   {
    "duration": 99,
    "start_time": "2024-08-07T02:50:54.031Z"
   },
   {
    "duration": 87,
    "start_time": "2024-08-07T02:50:54.136Z"
   },
   {
    "duration": 90,
    "start_time": "2024-08-07T02:50:54.229Z"
   },
   {
    "duration": 81,
    "start_time": "2024-08-07T02:50:54.326Z"
   },
   {
    "duration": 381,
    "start_time": "2024-08-07T02:50:54.410Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T02:50:54.794Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T02:50:54.802Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T02:50:54.804Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T02:50:54.807Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T02:50:54.810Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T02:50:54.811Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T02:50:54.813Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T02:50:54.816Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T02:50:54.819Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-07T02:55:55.209Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-07T02:56:08.739Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T02:57:44.155Z"
   },
   {
    "duration": 220,
    "start_time": "2024-08-07T02:58:44.633Z"
   },
   {
    "duration": 241,
    "start_time": "2024-08-07T02:59:24.117Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T03:03:22.106Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-07T03:11:13.003Z"
   },
   {
    "duration": 1249,
    "start_time": "2024-08-07T03:11:37.377Z"
   },
   {
    "duration": 712,
    "start_time": "2024-08-07T03:11:58.128Z"
   },
   {
    "duration": 150,
    "start_time": "2024-08-07T03:12:16.353Z"
   },
   {
    "duration": 98,
    "start_time": "2024-08-07T03:12:41.972Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-07T03:30:17.752Z"
   },
   {
    "duration": 499,
    "start_time": "2024-08-07T13:24:12.205Z"
   },
   {
    "duration": 237,
    "start_time": "2024-08-07T13:24:12.709Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T13:24:12.950Z"
   },
   {
    "duration": 37,
    "start_time": "2024-08-07T13:24:13.001Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T13:24:13.042Z"
   },
   {
    "duration": 38,
    "start_time": "2024-08-07T13:24:13.065Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T13:24:13.106Z"
   },
   {
    "duration": 32,
    "start_time": "2024-08-07T13:24:13.116Z"
   },
   {
    "duration": 67,
    "start_time": "2024-08-07T13:24:13.150Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-07T13:24:13.222Z"
   },
   {
    "duration": 97,
    "start_time": "2024-08-07T13:24:13.252Z"
   },
   {
    "duration": 77,
    "start_time": "2024-08-07T13:24:13.352Z"
   },
   {
    "duration": 85,
    "start_time": "2024-08-07T13:24:13.431Z"
   },
   {
    "duration": 68,
    "start_time": "2024-08-07T13:24:13.520Z"
   },
   {
    "duration": 160,
    "start_time": "2024-08-07T13:24:13.603Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T13:24:13.766Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T13:24:13.768Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T13:24:13.770Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T13:24:13.773Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T13:24:13.776Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T13:24:13.778Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T13:24:13.803Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T13:24:13.805Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T13:24:13.807Z"
   },
   {
    "duration": 9,
    "start_time": "2024-08-07T13:25:10.001Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T13:25:42.780Z"
   },
   {
    "duration": 68,
    "start_time": "2024-08-07T13:29:16.505Z"
   },
   {
    "duration": 9,
    "start_time": "2024-08-07T13:39:10.238Z"
   },
   {
    "duration": 324,
    "start_time": "2024-08-07T13:39:18.659Z"
   },
   {
    "duration": 28,
    "start_time": "2024-08-07T13:39:28.601Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-07T13:40:19.400Z"
   },
   {
    "duration": 93,
    "start_time": "2024-08-07T13:52:52.856Z"
   },
   {
    "duration": 74,
    "start_time": "2024-08-07T13:54:35.925Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T13:54:38.664Z"
   },
   {
    "duration": 313,
    "start_time": "2024-08-07T14:53:44.522Z"
   },
   {
    "duration": 21,
    "start_time": "2024-08-07T14:54:02.899Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T15:06:41.416Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T15:07:32.445Z"
   },
   {
    "duration": 20,
    "start_time": "2024-08-07T15:08:33.564Z"
   },
   {
    "duration": 1505,
    "start_time": "2024-08-07T15:08:51.999Z"
   },
   {
    "duration": 77,
    "start_time": "2024-08-07T15:11:58.030Z"
   },
   {
    "duration": 71,
    "start_time": "2024-08-07T15:12:02.873Z"
   },
   {
    "duration": 72,
    "start_time": "2024-08-07T15:22:00.612Z"
   },
   {
    "duration": 3,
    "start_time": "2024-08-07T15:22:04.621Z"
   },
   {
    "duration": 82,
    "start_time": "2024-08-07T15:22:26.462Z"
   },
   {
    "duration": 73,
    "start_time": "2024-08-07T15:23:01.438Z"
   },
   {
    "duration": 3,
    "start_time": "2024-08-07T15:23:15.061Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-07T15:24:32.438Z"
   },
   {
    "duration": 436,
    "start_time": "2024-08-07T15:24:49.461Z"
   },
   {
    "duration": 203,
    "start_time": "2024-08-07T15:24:49.901Z"
   },
   {
    "duration": 33,
    "start_time": "2024-08-07T15:24:50.106Z"
   },
   {
    "duration": 36,
    "start_time": "2024-08-07T15:24:50.142Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T15:24:50.183Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-07T15:24:50.234Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T15:24:50.245Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T15:24:50.255Z"
   },
   {
    "duration": 70,
    "start_time": "2024-08-07T15:24:50.287Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-07T15:24:50.360Z"
   },
   {
    "duration": 90,
    "start_time": "2024-08-07T15:24:50.389Z"
   },
   {
    "duration": 81,
    "start_time": "2024-08-07T15:24:50.482Z"
   },
   {
    "duration": 83,
    "start_time": "2024-08-07T15:24:50.566Z"
   },
   {
    "duration": 62,
    "start_time": "2024-08-07T15:24:50.654Z"
   },
   {
    "duration": 65,
    "start_time": "2024-08-07T15:24:50.732Z"
   },
   {
    "duration": 5,
    "start_time": "2024-08-07T15:24:50.800Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-07T15:24:50.832Z"
   },
   {
    "duration": 76,
    "start_time": "2024-08-07T15:24:50.860Z"
   },
   {
    "duration": 13,
    "start_time": "2024-08-07T15:24:50.938Z"
   },
   {
    "duration": 12,
    "start_time": "2024-08-07T15:24:50.954Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T15:24:50.969Z"
   },
   {
    "duration": 3,
    "start_time": "2024-08-07T15:24:50.977Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T15:24:50.983Z"
   },
   {
    "duration": 46,
    "start_time": "2024-08-07T15:24:50.989Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T15:24:51.039Z"
   },
   {
    "duration": 15,
    "start_time": "2024-08-07T15:25:10.468Z"
   },
   {
    "duration": 13,
    "start_time": "2024-08-07T15:25:14.714Z"
   },
   {
    "duration": 14,
    "start_time": "2024-08-07T15:25:24.783Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T15:25:35.388Z"
   },
   {
    "duration": 329,
    "start_time": "2024-08-07T15:27:06.750Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T15:27:22.873Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-07T15:29:57.604Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T15:33:12.824Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-07T15:38:57.430Z"
   },
   {
    "duration": 38,
    "start_time": "2024-08-07T15:39:47.101Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T15:39:50.778Z"
   },
   {
    "duration": 34,
    "start_time": "2024-08-07T15:40:04.367Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T15:45:46.153Z"
   },
   {
    "duration": 706,
    "start_time": "2024-08-07T15:45:59.647Z"
   },
   {
    "duration": 80,
    "start_time": "2024-08-07T15:46:54.128Z"
   },
   {
    "duration": 83,
    "start_time": "2024-08-07T15:51:23.057Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-07T15:53:55.433Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T16:04:56.246Z"
   },
   {
    "duration": 85,
    "start_time": "2024-08-07T16:05:03.959Z"
   },
   {
    "duration": 83,
    "start_time": "2024-08-07T16:05:11.986Z"
   },
   {
    "duration": 182,
    "start_time": "2024-08-07T16:07:22.326Z"
   },
   {
    "duration": 71,
    "start_time": "2024-08-07T16:07:38.820Z"
   },
   {
    "duration": 43,
    "start_time": "2024-08-07T16:09:51.716Z"
   },
   {
    "duration": 76,
    "start_time": "2024-08-07T16:19:26.407Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T16:22:53.048Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-07T16:25:56.294Z"
   },
   {
    "duration": 13,
    "start_time": "2024-08-07T16:26:40.208Z"
   },
   {
    "duration": 28,
    "start_time": "2024-08-07T16:28:06.020Z"
   },
   {
    "duration": 33,
    "start_time": "2024-08-07T16:31:00.364Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-07T16:31:06.426Z"
   },
   {
    "duration": 449,
    "start_time": "2024-08-07T16:31:54.050Z"
   },
   {
    "duration": 203,
    "start_time": "2024-08-07T16:31:54.502Z"
   },
   {
    "duration": 34,
    "start_time": "2024-08-07T16:31:54.708Z"
   },
   {
    "duration": 36,
    "start_time": "2024-08-07T16:31:54.745Z"
   },
   {
    "duration": 18,
    "start_time": "2024-08-07T16:31:54.785Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-07T16:31:54.833Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T16:31:54.844Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T16:31:54.854Z"
   },
   {
    "duration": 76,
    "start_time": "2024-08-07T16:31:54.886Z"
   },
   {
    "duration": 31,
    "start_time": "2024-08-07T16:31:54.964Z"
   },
   {
    "duration": 95,
    "start_time": "2024-08-07T16:31:54.997Z"
   },
   {
    "duration": 89,
    "start_time": "2024-08-07T16:31:55.094Z"
   },
   {
    "duration": 114,
    "start_time": "2024-08-07T16:31:55.186Z"
   },
   {
    "duration": 79,
    "start_time": "2024-08-07T16:31:55.306Z"
   },
   {
    "duration": 70,
    "start_time": "2024-08-07T16:31:55.389Z"
   },
   {
    "duration": 5,
    "start_time": "2024-08-07T16:31:55.461Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T16:31:55.469Z"
   },
   {
    "duration": 87,
    "start_time": "2024-08-07T16:31:55.497Z"
   },
   {
    "duration": 46,
    "start_time": "2024-08-07T16:31:55.586Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T16:31:55.634Z"
   },
   {
    "duration": 17,
    "start_time": "2024-08-07T16:31:55.662Z"
   },
   {
    "duration": 62,
    "start_time": "2024-08-07T16:31:55.682Z"
   },
   {
    "duration": 5,
    "start_time": "2024-08-07T16:31:55.747Z"
   },
   {
    "duration": 3,
    "start_time": "2024-08-07T16:31:55.755Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T16:31:55.761Z"
   },
   {
    "duration": 32,
    "start_time": "2024-08-07T16:33:53.591Z"
   },
   {
    "duration": 464,
    "start_time": "2024-08-07T16:34:08.634Z"
   },
   {
    "duration": 203,
    "start_time": "2024-08-07T16:34:09.101Z"
   },
   {
    "duration": 32,
    "start_time": "2024-08-07T16:34:09.307Z"
   },
   {
    "duration": 37,
    "start_time": "2024-08-07T16:34:09.343Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-07T16:34:09.382Z"
   },
   {
    "duration": 10,
    "start_time": "2024-08-07T16:34:09.434Z"
   },
   {
    "duration": 10,
    "start_time": "2024-08-07T16:34:09.448Z"
   },
   {
    "duration": 83,
    "start_time": "2024-08-07T16:34:09.464Z"
   },
   {
    "duration": 43,
    "start_time": "2024-08-07T16:34:09.551Z"
   },
   {
    "duration": 57,
    "start_time": "2024-08-07T16:34:09.601Z"
   },
   {
    "duration": 95,
    "start_time": "2024-08-07T16:34:09.661Z"
   },
   {
    "duration": 90,
    "start_time": "2024-08-07T16:34:09.760Z"
   },
   {
    "duration": 122,
    "start_time": "2024-08-07T16:34:09.854Z"
   },
   {
    "duration": 112,
    "start_time": "2024-08-07T16:34:09.980Z"
   },
   {
    "duration": 97,
    "start_time": "2024-08-07T16:34:10.096Z"
   },
   {
    "duration": 6,
    "start_time": "2024-08-07T16:34:10.197Z"
   },
   {
    "duration": 49,
    "start_time": "2024-08-07T16:34:10.208Z"
   },
   {
    "duration": 75,
    "start_time": "2024-08-07T16:34:10.260Z"
   },
   {
    "duration": 31,
    "start_time": "2024-08-07T16:34:10.337Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-07T16:34:10.371Z"
   },
   {
    "duration": 16,
    "start_time": "2024-08-07T16:34:10.432Z"
   },
   {
    "duration": 28,
    "start_time": "2024-08-07T16:34:10.452Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T16:34:10.483Z"
   },
   {
    "duration": 47,
    "start_time": "2024-08-07T16:34:10.490Z"
   },
   {
    "duration": 3,
    "start_time": "2024-08-07T16:34:10.540Z"
   },
   {
    "duration": 24,
    "start_time": "2024-08-07T16:37:43.426Z"
   },
   {
    "duration": 330,
    "start_time": "2024-08-07T21:50:42.423Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-07T21:50:53.330Z"
   },
   {
    "duration": 467,
    "start_time": "2024-08-07T21:51:20.114Z"
   },
   {
    "duration": 226,
    "start_time": "2024-08-07T21:51:20.585Z"
   },
   {
    "duration": 24,
    "start_time": "2024-08-07T21:51:20.814Z"
   },
   {
    "duration": 35,
    "start_time": "2024-08-07T21:51:20.843Z"
   },
   {
    "duration": 37,
    "start_time": "2024-08-07T21:51:20.883Z"
   },
   {
    "duration": 12,
    "start_time": "2024-08-07T21:51:20.923Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T21:51:20.938Z"
   },
   {
    "duration": 65,
    "start_time": "2024-08-07T21:51:20.948Z"
   },
   {
    "duration": 38,
    "start_time": "2024-08-07T21:51:21.016Z"
   },
   {
    "duration": 54,
    "start_time": "2024-08-07T21:51:21.056Z"
   },
   {
    "duration": 74,
    "start_time": "2024-08-07T21:51:21.113Z"
   },
   {
    "duration": 73,
    "start_time": "2024-08-07T21:51:21.208Z"
   },
   {
    "duration": 103,
    "start_time": "2024-08-07T21:51:21.284Z"
   },
   {
    "duration": 80,
    "start_time": "2024-08-07T21:51:21.393Z"
   },
   {
    "duration": 78,
    "start_time": "2024-08-07T21:51:21.476Z"
   },
   {
    "duration": 5,
    "start_time": "2024-08-07T21:51:21.556Z"
   },
   {
    "duration": 43,
    "start_time": "2024-08-07T21:51:21.565Z"
   },
   {
    "duration": 62,
    "start_time": "2024-08-07T21:51:21.611Z"
   },
   {
    "duration": 50,
    "start_time": "2024-08-07T21:51:21.676Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-07T21:51:21.729Z"
   },
   {
    "duration": 15,
    "start_time": "2024-08-07T21:51:21.758Z"
   },
   {
    "duration": 55,
    "start_time": "2024-08-07T21:51:21.776Z"
   },
   {
    "duration": 498,
    "start_time": "2024-08-07T21:51:21.834Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T21:51:22.334Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T21:51:22.336Z"
   },
   {
    "duration": 34,
    "start_time": "2024-08-07T21:51:57.989Z"
   },
   {
    "duration": 587,
    "start_time": "2024-08-07T22:04:20.353Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T22:04:56.624Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T22:05:21.737Z"
   },
   {
    "duration": 6,
    "start_time": "2024-08-07T22:06:21.048Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T22:06:27.647Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T22:06:41.887Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-07T22:06:50.650Z"
   },
   {
    "duration": 40,
    "start_time": "2024-08-07T22:19:55.008Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-07T22:23:25.269Z"
   },
   {
    "duration": 142,
    "start_time": "2024-08-07T22:27:26.194Z"
   },
   {
    "duration": 120,
    "start_time": "2024-08-07T22:28:07.663Z"
   },
   {
    "duration": 126,
    "start_time": "2024-08-07T22:28:27.875Z"
   },
   {
    "duration": 10,
    "start_time": "2024-08-07T22:29:47.112Z"
   },
   {
    "duration": 452,
    "start_time": "2024-08-07T22:32:39.721Z"
   },
   {
    "duration": 206,
    "start_time": "2024-08-07T22:32:40.177Z"
   },
   {
    "duration": 32,
    "start_time": "2024-08-07T22:32:40.386Z"
   },
   {
    "duration": 36,
    "start_time": "2024-08-07T22:32:40.422Z"
   },
   {
    "duration": 18,
    "start_time": "2024-08-07T22:32:40.461Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-07T22:32:40.509Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T22:32:40.519Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T22:32:40.529Z"
   },
   {
    "duration": 70,
    "start_time": "2024-08-07T22:32:40.563Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-07T22:32:40.639Z"
   },
   {
    "duration": 99,
    "start_time": "2024-08-07T22:32:40.669Z"
   },
   {
    "duration": 90,
    "start_time": "2024-08-07T22:32:40.770Z"
   },
   {
    "duration": 102,
    "start_time": "2024-08-07T22:32:40.862Z"
   },
   {
    "duration": 83,
    "start_time": "2024-08-07T22:32:40.968Z"
   },
   {
    "duration": 79,
    "start_time": "2024-08-07T22:32:41.053Z"
   },
   {
    "duration": 5,
    "start_time": "2024-08-07T22:32:41.134Z"
   },
   {
    "duration": 24,
    "start_time": "2024-08-07T22:32:41.142Z"
   },
   {
    "duration": 84,
    "start_time": "2024-08-07T22:32:41.168Z"
   },
   {
    "duration": 31,
    "start_time": "2024-08-07T22:32:41.254Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-07T22:32:41.308Z"
   },
   {
    "duration": 15,
    "start_time": "2024-08-07T22:32:41.337Z"
   },
   {
    "duration": 52,
    "start_time": "2024-08-07T22:32:41.356Z"
   },
   {
    "duration": 9,
    "start_time": "2024-08-07T22:32:41.411Z"
   },
   {
    "duration": 536,
    "start_time": "2024-08-07T22:32:41.423Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T22:32:41.962Z"
   },
   {
    "duration": 406,
    "start_time": "2024-08-07T22:34:03.368Z"
   },
   {
    "duration": 206,
    "start_time": "2024-08-07T22:34:03.777Z"
   },
   {
    "duration": 33,
    "start_time": "2024-08-07T22:34:03.985Z"
   },
   {
    "duration": 36,
    "start_time": "2024-08-07T22:34:04.023Z"
   },
   {
    "duration": 18,
    "start_time": "2024-08-07T22:34:04.062Z"
   },
   {
    "duration": 32,
    "start_time": "2024-08-07T22:34:04.082Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T22:34:04.117Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T22:34:04.127Z"
   },
   {
    "duration": 78,
    "start_time": "2024-08-07T22:34:04.160Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-07T22:34:04.244Z"
   },
   {
    "duration": 93,
    "start_time": "2024-08-07T22:34:04.274Z"
   },
   {
    "duration": 88,
    "start_time": "2024-08-07T22:34:04.370Z"
   },
   {
    "duration": 104,
    "start_time": "2024-08-07T22:34:04.461Z"
   },
   {
    "duration": 90,
    "start_time": "2024-08-07T22:34:04.569Z"
   },
   {
    "duration": 74,
    "start_time": "2024-08-07T22:34:04.662Z"
   },
   {
    "duration": 5,
    "start_time": "2024-08-07T22:34:04.739Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T22:34:04.746Z"
   },
   {
    "duration": 90,
    "start_time": "2024-08-07T22:34:04.773Z"
   },
   {
    "duration": 48,
    "start_time": "2024-08-07T22:34:04.867Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-07T22:34:04.918Z"
   },
   {
    "duration": 16,
    "start_time": "2024-08-07T22:34:04.948Z"
   },
   {
    "duration": 55,
    "start_time": "2024-08-07T22:34:04.966Z"
   },
   {
    "duration": 10,
    "start_time": "2024-08-07T22:34:05.024Z"
   },
   {
    "duration": 539,
    "start_time": "2024-08-07T22:34:05.037Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T22:34:05.579Z"
   },
   {
    "duration": 438,
    "start_time": "2024-08-07T22:37:35.785Z"
   },
   {
    "duration": 201,
    "start_time": "2024-08-07T22:37:36.226Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T22:37:36.430Z"
   },
   {
    "duration": 57,
    "start_time": "2024-08-07T22:37:36.458Z"
   },
   {
    "duration": 21,
    "start_time": "2024-08-07T22:37:36.521Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-07T22:37:36.545Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T22:37:36.556Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T22:37:36.608Z"
   },
   {
    "duration": 39,
    "start_time": "2024-08-07T22:37:36.640Z"
   },
   {
    "duration": 45,
    "start_time": "2024-08-07T22:37:36.684Z"
   },
   {
    "duration": 96,
    "start_time": "2024-08-07T22:37:36.732Z"
   },
   {
    "duration": 89,
    "start_time": "2024-08-07T22:37:36.830Z"
   },
   {
    "duration": 99,
    "start_time": "2024-08-07T22:37:36.923Z"
   },
   {
    "duration": 70,
    "start_time": "2024-08-07T22:37:37.025Z"
   },
   {
    "duration": 63,
    "start_time": "2024-08-07T22:37:37.098Z"
   },
   {
    "duration": 5,
    "start_time": "2024-08-07T22:37:37.164Z"
   },
   {
    "duration": 51,
    "start_time": "2024-08-07T22:37:37.172Z"
   },
   {
    "duration": 54,
    "start_time": "2024-08-07T22:37:37.226Z"
   },
   {
    "duration": 52,
    "start_time": "2024-08-07T22:37:37.283Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T22:37:37.339Z"
   },
   {
    "duration": 43,
    "start_time": "2024-08-07T22:37:37.372Z"
   },
   {
    "duration": 21,
    "start_time": "2024-08-07T22:37:37.418Z"
   },
   {
    "duration": 9,
    "start_time": "2024-08-07T22:37:37.443Z"
   },
   {
    "duration": 540,
    "start_time": "2024-08-07T22:37:37.455Z"
   },
   {
    "duration": 0,
    "start_time": "2024-08-07T22:37:37.998Z"
   },
   {
    "duration": 6,
    "start_time": "2024-08-07T22:41:41.384Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T22:42:05.691Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-07T22:43:53.750Z"
   },
   {
    "duration": 34,
    "start_time": "2024-08-07T22:44:05.406Z"
   },
   {
    "duration": 459,
    "start_time": "2024-08-07T22:46:41.489Z"
   },
   {
    "duration": 208,
    "start_time": "2024-08-07T22:46:41.951Z"
   },
   {
    "duration": 28,
    "start_time": "2024-08-07T22:46:42.162Z"
   },
   {
    "duration": 48,
    "start_time": "2024-08-07T22:46:42.194Z"
   },
   {
    "duration": 18,
    "start_time": "2024-08-07T22:46:42.244Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-07T22:46:42.265Z"
   },
   {
    "duration": 6,
    "start_time": "2024-08-07T22:46:42.310Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T22:46:42.320Z"
   },
   {
    "duration": 68,
    "start_time": "2024-08-07T22:46:42.352Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T22:46:42.425Z"
   },
   {
    "duration": 98,
    "start_time": "2024-08-07T22:46:42.456Z"
   },
   {
    "duration": 80,
    "start_time": "2024-08-07T22:46:42.560Z"
   },
   {
    "duration": 102,
    "start_time": "2024-08-07T22:46:42.642Z"
   },
   {
    "duration": 80,
    "start_time": "2024-08-07T22:46:42.747Z"
   },
   {
    "duration": 61,
    "start_time": "2024-08-07T22:46:42.830Z"
   },
   {
    "duration": 20,
    "start_time": "2024-08-07T22:46:42.894Z"
   },
   {
    "duration": 24,
    "start_time": "2024-08-07T22:46:42.917Z"
   },
   {
    "duration": 78,
    "start_time": "2024-08-07T22:46:42.944Z"
   },
   {
    "duration": 31,
    "start_time": "2024-08-07T22:46:43.026Z"
   },
   {
    "duration": 52,
    "start_time": "2024-08-07T22:46:43.060Z"
   },
   {
    "duration": 17,
    "start_time": "2024-08-07T22:46:43.115Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-07T22:46:43.135Z"
   },
   {
    "duration": 9,
    "start_time": "2024-08-07T22:46:43.159Z"
   },
   {
    "duration": 55,
    "start_time": "2024-08-07T22:46:43.171Z"
   },
   {
    "duration": 532,
    "start_time": "2024-08-07T22:46:43.229Z"
   },
   {
    "duration": 33,
    "start_time": "2024-08-07T22:52:14.957Z"
   },
   {
    "duration": 16,
    "start_time": "2024-08-07T22:52:35.376Z"
   },
   {
    "duration": 31,
    "start_time": "2024-08-07T22:53:10.486Z"
   },
   {
    "duration": 34,
    "start_time": "2024-08-07T23:25:41.098Z"
   },
   {
    "duration": 33,
    "start_time": "2024-08-07T23:32:22.020Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T23:38:30.636Z"
   },
   {
    "duration": 6,
    "start_time": "2024-08-07T23:38:37.290Z"
   },
   {
    "duration": 6,
    "start_time": "2024-08-07T23:38:48.326Z"
   },
   {
    "duration": 33,
    "start_time": "2024-08-07T23:44:23.931Z"
   },
   {
    "duration": 32,
    "start_time": "2024-08-07T23:44:50.040Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T23:46:28.460Z"
   },
   {
    "duration": 543,
    "start_time": "2024-08-07T23:47:52.758Z"
   },
   {
    "duration": 477,
    "start_time": "2024-08-07T23:48:25.589Z"
   },
   {
    "duration": 226,
    "start_time": "2024-08-07T23:48:26.069Z"
   },
   {
    "duration": 36,
    "start_time": "2024-08-07T23:48:26.298Z"
   },
   {
    "duration": 39,
    "start_time": "2024-08-07T23:48:26.339Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T23:48:26.408Z"
   },
   {
    "duration": 10,
    "start_time": "2024-08-07T23:48:26.430Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T23:48:26.443Z"
   },
   {
    "duration": 68,
    "start_time": "2024-08-07T23:48:26.453Z"
   },
   {
    "duration": 37,
    "start_time": "2024-08-07T23:48:26.527Z"
   },
   {
    "duration": 47,
    "start_time": "2024-08-07T23:48:26.569Z"
   },
   {
    "duration": 96,
    "start_time": "2024-08-07T23:48:26.619Z"
   },
   {
    "duration": 92,
    "start_time": "2024-08-07T23:48:26.718Z"
   },
   {
    "duration": 106,
    "start_time": "2024-08-07T23:48:26.813Z"
   },
   {
    "duration": 73,
    "start_time": "2024-08-07T23:48:26.922Z"
   },
   {
    "duration": 55,
    "start_time": "2024-08-07T23:48:27.009Z"
   },
   {
    "duration": 4,
    "start_time": "2024-08-07T23:48:27.067Z"
   },
   {
    "duration": 50,
    "start_time": "2024-08-07T23:48:27.075Z"
   },
   {
    "duration": 53,
    "start_time": "2024-08-07T23:48:27.128Z"
   },
   {
    "duration": 52,
    "start_time": "2024-08-07T23:48:27.185Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T23:48:27.240Z"
   },
   {
    "duration": 47,
    "start_time": "2024-08-07T23:48:27.272Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T23:48:27.322Z"
   },
   {
    "duration": 14,
    "start_time": "2024-08-07T23:48:27.348Z"
   },
   {
    "duration": 54,
    "start_time": "2024-08-07T23:48:27.365Z"
   },
   {
    "duration": 1032,
    "start_time": "2024-08-07T23:48:27.422Z"
   },
   {
    "duration": 96,
    "start_time": "2024-08-07T23:50:09.754Z"
   },
   {
    "duration": 101,
    "start_time": "2024-08-07T23:51:30.278Z"
   },
   {
    "duration": 102,
    "start_time": "2024-08-07T23:54:41.750Z"
   },
   {
    "duration": 472,
    "start_time": "2024-08-07T23:54:57.594Z"
   },
   {
    "duration": 208,
    "start_time": "2024-08-07T23:54:58.070Z"
   },
   {
    "duration": 29,
    "start_time": "2024-08-07T23:54:58.281Z"
   },
   {
    "duration": 40,
    "start_time": "2024-08-07T23:54:58.314Z"
   },
   {
    "duration": 19,
    "start_time": "2024-08-07T23:54:58.357Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-07T23:54:58.410Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T23:54:58.421Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-07T23:54:58.430Z"
   },
   {
    "duration": 76,
    "start_time": "2024-08-07T23:54:58.463Z"
   },
   {
    "duration": 28,
    "start_time": "2024-08-07T23:54:58.544Z"
   },
   {
    "duration": 99,
    "start_time": "2024-08-07T23:54:58.575Z"
   },
   {
    "duration": 94,
    "start_time": "2024-08-07T23:54:58.677Z"
   },
   {
    "duration": 116,
    "start_time": "2024-08-07T23:54:58.774Z"
   },
   {
    "duration": 91,
    "start_time": "2024-08-07T23:54:58.893Z"
   },
   {
    "duration": 69,
    "start_time": "2024-08-07T23:54:58.987Z"
   },
   {
    "duration": 5,
    "start_time": "2024-08-07T23:54:59.059Z"
   },
   {
    "duration": 48,
    "start_time": "2024-08-07T23:54:59.069Z"
   },
   {
    "duration": 59,
    "start_time": "2024-08-07T23:54:59.119Z"
   },
   {
    "duration": 55,
    "start_time": "2024-08-07T23:54:59.181Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-07T23:54:59.239Z"
   },
   {
    "duration": 43,
    "start_time": "2024-08-07T23:54:59.269Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T23:54:59.315Z"
   },
   {
    "duration": 10,
    "start_time": "2024-08-07T23:54:59.341Z"
   },
   {
    "duration": 58,
    "start_time": "2024-08-07T23:54:59.354Z"
   },
   {
    "duration": 1059,
    "start_time": "2024-08-07T23:54:59.415Z"
   },
   {
    "duration": 458,
    "start_time": "2024-08-07T23:55:31.229Z"
   },
   {
    "duration": 222,
    "start_time": "2024-08-07T23:55:31.691Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-07T23:55:31.916Z"
   },
   {
    "duration": 37,
    "start_time": "2024-08-07T23:55:31.946Z"
   },
   {
    "duration": 39,
    "start_time": "2024-08-07T23:55:31.985Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-07T23:55:32.027Z"
   },
   {
    "duration": 6,
    "start_time": "2024-08-07T23:55:32.038Z"
   },
   {
    "duration": 69,
    "start_time": "2024-08-07T23:55:32.048Z"
   },
   {
    "duration": 40,
    "start_time": "2024-08-07T23:55:32.119Z"
   },
   {
    "duration": 53,
    "start_time": "2024-08-07T23:55:32.166Z"
   },
   {
    "duration": 94,
    "start_time": "2024-08-07T23:55:32.222Z"
   },
   {
    "duration": 91,
    "start_time": "2024-08-07T23:55:32.319Z"
   },
   {
    "duration": 105,
    "start_time": "2024-08-07T23:55:32.413Z"
   },
   {
    "duration": 88,
    "start_time": "2024-08-07T23:55:32.522Z"
   },
   {
    "duration": 56,
    "start_time": "2024-08-07T23:55:32.613Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-07T23:55:32.673Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T23:55:32.708Z"
   },
   {
    "duration": 53,
    "start_time": "2024-08-07T23:55:32.733Z"
   },
   {
    "duration": 33,
    "start_time": "2024-08-07T23:55:32.809Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-07T23:55:32.845Z"
   },
   {
    "duration": 46,
    "start_time": "2024-08-07T23:55:32.873Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-07T23:55:32.922Z"
   },
   {
    "duration": 9,
    "start_time": "2024-08-07T23:55:32.949Z"
   },
   {
    "duration": 57,
    "start_time": "2024-08-07T23:55:32.962Z"
   },
   {
    "duration": 1042,
    "start_time": "2024-08-07T23:55:33.023Z"
   },
   {
    "duration": 96,
    "start_time": "2024-08-07T23:55:55.436Z"
   },
   {
    "duration": 110,
    "start_time": "2024-08-07T23:59:10.932Z"
   },
   {
    "duration": 101,
    "start_time": "2024-08-08T00:00:02.445Z"
   },
   {
    "duration": 498,
    "start_time": "2024-08-08T00:03:04.919Z"
   },
   {
    "duration": 239,
    "start_time": "2024-08-08T00:03:05.421Z"
   },
   {
    "duration": 25,
    "start_time": "2024-08-08T00:03:05.663Z"
   },
   {
    "duration": 50,
    "start_time": "2024-08-08T00:03:05.692Z"
   },
   {
    "duration": 20,
    "start_time": "2024-08-08T00:03:05.745Z"
   },
   {
    "duration": 39,
    "start_time": "2024-08-08T00:03:05.769Z"
   },
   {
    "duration": 7,
    "start_time": "2024-08-08T00:03:05.811Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-08T00:03:05.823Z"
   },
   {
    "duration": 76,
    "start_time": "2024-08-08T00:03:05.856Z"
   },
   {
    "duration": 28,
    "start_time": "2024-08-08T00:03:05.938Z"
   },
   {
    "duration": 110,
    "start_time": "2024-08-08T00:03:05.970Z"
   },
   {
    "duration": 100,
    "start_time": "2024-08-08T00:03:06.083Z"
   },
   {
    "duration": 105,
    "start_time": "2024-08-08T00:03:06.186Z"
   },
   {
    "duration": 93,
    "start_time": "2024-08-08T00:03:06.294Z"
   },
   {
    "duration": 68,
    "start_time": "2024-08-08T00:03:06.390Z"
   },
   {
    "duration": 6,
    "start_time": "2024-08-08T00:03:06.461Z"
   },
   {
    "duration": 52,
    "start_time": "2024-08-08T00:03:06.470Z"
   },
   {
    "duration": 57,
    "start_time": "2024-08-08T00:03:06.526Z"
   },
   {
    "duration": 59,
    "start_time": "2024-08-08T00:03:06.587Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-08T00:03:06.650Z"
   },
   {
    "duration": 38,
    "start_time": "2024-08-08T00:03:06.679Z"
   },
   {
    "duration": 22,
    "start_time": "2024-08-08T00:03:06.721Z"
   },
   {
    "duration": 10,
    "start_time": "2024-08-08T00:03:06.746Z"
   },
   {
    "duration": 62,
    "start_time": "2024-08-08T00:03:06.759Z"
   },
   {
    "duration": 360,
    "start_time": "2024-08-08T00:03:06.825Z"
   },
   {
    "duration": 15,
    "start_time": "2024-08-08T00:03:54.658Z"
   },
   {
    "duration": 438,
    "start_time": "2024-08-08T04:25:47.937Z"
   },
   {
    "duration": 235,
    "start_time": "2024-08-08T04:25:48.379Z"
   },
   {
    "duration": 26,
    "start_time": "2024-08-08T04:25:48.616Z"
   },
   {
    "duration": 56,
    "start_time": "2024-08-08T04:25:48.647Z"
   },
   {
    "duration": 18,
    "start_time": "2024-08-08T04:25:48.707Z"
   },
   {
    "duration": 8,
    "start_time": "2024-08-08T04:25:48.729Z"
   },
   {
    "duration": 10,
    "start_time": "2024-08-08T04:25:48.740Z"
   },
   {
    "duration": 30,
    "start_time": "2024-08-08T04:25:48.792Z"
   },
   {
    "duration": 39,
    "start_time": "2024-08-08T04:25:48.825Z"
   },
   {
    "duration": 31,
    "start_time": "2024-08-08T04:25:48.889Z"
   },
   {
    "duration": 105,
    "start_time": "2024-08-08T04:25:48.924Z"
   },
   {
    "duration": 88,
    "start_time": "2024-08-08T04:25:49.032Z"
   },
   {
    "duration": 107,
    "start_time": "2024-08-08T04:25:49.123Z"
   },
   {
    "duration": 83,
    "start_time": "2024-08-08T04:25:49.233Z"
   },
   {
    "duration": 71,
    "start_time": "2024-08-08T04:25:49.319Z"
   },
   {
    "duration": 5,
    "start_time": "2024-08-08T04:25:49.394Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-08T04:25:49.401Z"
   },
   {
    "duration": 83,
    "start_time": "2024-08-08T04:25:49.427Z"
   },
   {
    "duration": 33,
    "start_time": "2024-08-08T04:25:49.513Z"
   },
   {
    "duration": 49,
    "start_time": "2024-08-08T04:25:49.549Z"
   },
   {
    "duration": 17,
    "start_time": "2024-08-08T04:25:49.601Z"
   },
   {
    "duration": 23,
    "start_time": "2024-08-08T04:25:49.621Z"
   },
   {
    "duration": 44,
    "start_time": "2024-08-08T04:25:49.647Z"
   },
   {
    "duration": 27,
    "start_time": "2024-08-08T04:25:49.694Z"
   },
   {
    "duration": 17,
    "start_time": "2024-08-08T04:25:49.724Z"
   },
   {
    "duration": 325,
    "start_time": "2025-04-18T15:30:37.002Z"
   },
   {
    "duration": 143,
    "start_time": "2025-04-18T15:30:37.329Z"
   },
   {
    "duration": 14,
    "start_time": "2025-04-18T15:30:37.473Z"
   },
   {
    "duration": 23,
    "start_time": "2025-04-18T15:30:37.490Z"
   },
   {
    "duration": 9,
    "start_time": "2025-04-18T15:30:37.515Z"
   },
   {
    "duration": 4,
    "start_time": "2025-04-18T15:30:37.526Z"
   },
   {
    "duration": 4,
    "start_time": "2025-04-18T15:30:37.532Z"
   },
   {
    "duration": 50,
    "start_time": "2025-04-18T15:30:37.537Z"
   },
   {
    "duration": 23,
    "start_time": "2025-04-18T15:30:37.589Z"
   },
   {
    "duration": 18,
    "start_time": "2025-04-18T15:30:37.616Z"
   },
   {
    "duration": 61,
    "start_time": "2025-04-18T15:30:37.635Z"
   },
   {
    "duration": 41,
    "start_time": "2025-04-18T15:30:37.698Z"
   },
   {
    "duration": 65,
    "start_time": "2025-04-18T15:30:37.740Z"
   },
   {
    "duration": 39,
    "start_time": "2025-04-18T15:30:37.807Z"
   },
   {
    "duration": 40,
    "start_time": "2025-04-18T15:30:37.847Z"
   },
   {
    "duration": 3,
    "start_time": "2025-04-18T15:30:37.888Z"
   },
   {
    "duration": 15,
    "start_time": "2025-04-18T15:30:37.892Z"
   },
   {
    "duration": 31,
    "start_time": "2025-04-18T15:30:37.908Z"
   },
   {
    "duration": 38,
    "start_time": "2025-04-18T15:30:37.941Z"
   },
   {
    "duration": 14,
    "start_time": "2025-04-18T15:30:37.981Z"
   },
   {
    "duration": 9,
    "start_time": "2025-04-18T15:30:37.997Z"
   },
   {
    "duration": 11,
    "start_time": "2025-04-18T15:30:38.008Z"
   },
   {
    "duration": 5,
    "start_time": "2025-04-18T15:30:38.020Z"
   },
   {
    "duration": 44,
    "start_time": "2025-04-18T15:30:38.027Z"
   },
   {
    "duration": 8,
    "start_time": "2025-04-18T15:30:38.073Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.19"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
